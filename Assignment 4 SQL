USE Northwind
GO

--1. Create a view named “view_product_order_[your_last_name]”, list all products and total ordered quantity for that product.
CREATE VIEW view_product_order_lu
AS
SELECT p.ProductName, ISNULL(SUM(od.Quantity),0) TotalQuantityOrdered
FROM Products p LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductName

--2. Create a stored procedure “sp_product_order_quantity_[your_last_name]” that accept product id as an input and total quantities of order as output parameter.
CREATE PROC sp_product_order_quantity_lu
@id int,
@totalquantity int out
AS
BEGIN
SELECT @totalquantity = SUM(Quantity) FROM [Order Details] WHERE ProductID = @id
END

--3. Create a stored procedure “sp_product_order_city_[your_last_name]” that accept product name as an input and top 5 cities that ordered most that product combined with the total quantity of that product ordered from that city as output.
CREATE PROC sp_product_order_city_lu
@name varchar(20)
AS
BEGIN
SELECT TOP 5 o.ShipCity AS City, COUNT(o.OrderID) AS TotalOrders, SUM(od.Quantity) AS TotalQuantity
FROM Products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN Orders o ON od.OrderID = o.OrderID
WHERE p.ProductName = @name
GROUP BY o.ShipCity
ORDER BY TotalOrders DESC, TotalQuantity DESC
END

--4. Create 2 new tables “people_your_last_name” “city_your_last_name”. City table has two records: {Id:1, City: Seattle}, {Id:2, City: Green Bay}. People has three records: {id:1, Name: Aaron Rodgers, City: 2}, {id:2, Name: Russell Wilson, City:1}, {Id: 3, Name: Jody Nelson, City:2}. Remove city of Seattle. If there was anyone from Seattle, put them into a new city “Madison”. Create a view “Packers_your_name” lists all people from Green Bay. If any error occurred, no changes should be made to DB. (after test) Drop both tables and view.
CREATE TABLE city_lu(
Id int PRIMARY KEY IDENTITY(1,1),
City varchar(20) NOT NULL
)

INSERT INTO city_lu VALUES('Seattle')
INSERT INTO city_lu VALUES('Green Bay')

CREATE TABLE people_lu(
Id int PRIMARY KEY IDENTITY(1,1),
Name varchar(20) NOT NULL,
City int FOREIGN KEY REFERENCES city_lu(Id) ON DELETE SET NULL
)

INSERT INTO people_lu VALUES('Aaron Rodgers', 2)
INSERT INTO people_lu VALUES('Russell Wilson', 1)
INSERT INTO people_lu VALUES('Jody Nelson', 2)

DELETE FROM city_lu
WHERE Id = 1

INSERT INTO city_lu VALUES('Madison')

UPDATE people_lu
SET City = 3
WHERE City IS NULL

SELECT *
FROM city_lu

SELECT *
FROM people_lu

CREATE VIEW Packers_lu
AS
SELECT pl.Name
FROM people_lu pl JOIN city_lu cl ON pl.City = cl.Id
WHERE cl.City = 'Green Bay'

DROP TABLE city_lu
DROP TABLE people_lu
DROP VIEW Packers_lu

--5. Create a stored procedure “sp_birthday_employees_[you_last_name]” that creates a new table “birthday_employees_your_last_name” and fill it with all employees that have a birthday on Feb. (Make a screen shot) drop the table. Employee table should not be affected.
CREATE PROC sp_birthday_employees_lu
AS
CREATE TABLE birthday_employees_lu(
EmployeeID int PRIMARY KEY,
LastName nvarchar(20) NOT NULL,
FirstName nvarchar(10) NOT NULL,
Title nvarchar(30),
TitleOfCourtesy nvarchar(25),
BirthDate datetime,
HireDate datetime,
Address nvarchar(60),
City nvarchar(15),
Region nvarchar(15),
PostalCode nvarchar(10),
Country nvarchar(10),
HomePhone nvarchar(24),
Extension nvarchar(4),
Photo image,
Notes ntext,
ReportsTo int FOREIGN KEY REFERENCES birthday_employees_lu(EmployeeID),
PhotoPath nvarchar(255)
)
INSERT INTO birthday_employees_lu
SELECT * FROM Employees
WHERE Month(BirthDate) = 2

EXEC sp_birthday_employees_lu

--6. How do you make sure two tables have the same data?
--   I don't think we talked about it in class so I searched it up. The CHECKSUM TABLE command allows you to make sure two tables have the same data.
